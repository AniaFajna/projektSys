import java.util.Scanner;

public class MainClass {

	private static int[][] A, L, Lt, M;

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int input = in.nextInt();
		A = new int[input][input];
		L = new int[input][input];
		Lt = new int[input][input];
		M = new int[input][input];

		fillMatrix(input);
		showMatrix(input, A);
		choleskyAlgorithm(input);
		setTriangleMatrix(input);
		transposeLMatrix(input);
		multiplyMatrix(input);
		showMatrix(input, L);
		showMatrix(input, Lt);
		showMatrix(input, M);
	}

	private static void fillMatrix(int N) {
		for(int i = 0; i < N; i++) {
			for(int j = 0; j < N; j++) {
				A[i][j] = factorial((i + j)) / (factorial(i)* factorial(j));
			}
		}
	}

	public static int factorial(int number) {
		int result = 1;
		for (int factor = 2; factor <= number; factor++) {
			result *= factor;
		}
		return result;
	}

	private static void showMatrix(int N, int[][] matrix) {
		for(int i = 0; i < N; i++) {
			for(int j = 0; j < N; j++) {
				System.out.print(matrix[i][j] + "\t");
			}
			System.out.println("");
		}
		System.out.println("");
	}

	private static void choleskyAlgorithm(int N) {
		for (int i = 0; i < N; i++) {
			A[i][i] = (int) Math.sqrt(A[i][i]);
			for (int j = i+1; j < N; j++) {
				A[j][i] = A[j][i]/A[i][i];
			}
			for (int j = i+1; j < N; j++) {
				for (int k = i+1; k < j; k++) {
					A[j][k] = A[j][k] - (A[j][i] * A[k][i]);
				}
			}
		}
	}

	private static void setTriangleMatrix(int N) {
		for(int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (i >= j) {
					L[i][j] = A[i][j];
				}
			}
		}
	}

	private static void transposeLMatrix(int N) {
		for(int i = 0 ; i < N ; i++){
			for(int j = 0 ; j < N ; j++){
				Lt[i][j] = L[j][i];
			}
		}
	}

	private static void multiplyMatrix(int N) {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				for (int k = 0; k < N; k++) {
					M[i][j] += L[i][k] * Lt[k][j];
				}
			}
		}
	}
}
